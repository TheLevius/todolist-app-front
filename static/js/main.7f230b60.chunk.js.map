{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","redux/app-reducer.ts","redux/todolist-reducer.ts","assets/img/svg/fistify-logo.svg","components/AddItemForm/AddItemForm.tsx","components/common/EditableSpan/EditableSpan.tsx","redux/task-reducer.ts","components/Todolist/Task/Task.tsx","components/Todolist/Todolist.tsx","components/Todolist/todolist-selectors.ts","components/Todolists/Todolists.tsx","components/TodolistsPage/TodolistsPage.tsx","components/LoginPage/LoginPage.tsx","components/RegistrationPage/RegistrationPage.tsx","App.tsx","redux/auth-reducer.ts","redux/store.ts","index.tsx","components/Todolist/Todolist.module.css"],"names":["TaskStatusesType","TaskPrioritiesType","ResultCodesEnum","incu","axios","create","baseURL","withCredentials","headers","authAPI","get","todolistsApi","title","post","todolistId","delete","put","taskId","model","appErrorHandle","data","dispatch","messages","length","appActions","errorDetectedAC","statusChangedAC","netWorkErrorHandle","error","message","initialState","status","isLoggedIn","isInitialized","type","payload","isInitializedChangedAC","value","isLoggedInChangedAC","todolistActions","todolist","filter","todolists","AddItemForm","bordered","addItem","useState","inputValue","setInputValue","onSubmitHandle","e","key","trim","style","display","width","onKeyPress","onBlur","placeholder","onChange","target","marginLeft","icon","color","fontSize","shape","Text","Typography","EditableSpan","onTitleChange","strong","isEditMode","setIsEditMode","content","setContent","onChangeSubmitHandle","event","prev","suffix","EnterOutlined","autoFocus","block","onClick","textOverflow","overflow","taskActions","tasks","task","updateTask","getState","a","t","id","resultCode","Success","Task","React","memo","useDispatch","alignItems","margin","checked","Completed","newTaskModel","New","todoListId","marginRight","paddingLeft","textAlign","batch","Todolist","useSelector","state","selectTasks","useEffect","items","size","tip","console","log","bodyStyle","height","justifyContent","flexDirection","className","styles","card","changeTodolistTitle","lineHeight","marginBottom","item","addTask","map","Group","toLowerCase","Button","Todolists","td","TodolistsPage","props","minHeight","backgroundColor","src","fastifyLogo","alt","maxWidth","padding","Item","addTodolist","flexWrap","LoginPage","RegistrationPage","App","app","initNotification","initializationMessage","useCallback","loading","duration","marginTop","success","warning","path","render","exact","to","slice","createSlice","name","reducers","isLoggedInStatusChangedAC","action","authReducer","reducer","rootReducer","actions","combineReducers","auth","entityStatus","tl","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","__store__","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7f230b60.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//axios configured instance\r\nconst incu = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '83ff2ca7-a319-4045-8f15-c83797dc9c95'\r\n    }\r\n});\r\n\r\n//API\r\nexport const authAPI = {\r\n    me() {\r\n        return incu.get<ResType<AuthUserInfoType>>(`auth/me`);\r\n\r\n    },\r\n    login(data: LoginReqParamsType) {\r\n        return incu.post<ResType<LoginResDataType>>(`auth/login`, {data});\r\n\r\n    },\r\n    logout() {\r\n        return incu.delete<ResType>(`auth/login`);\r\n    }\r\n}\r\n\r\nexport const todolistsApi = {\r\n    getTodolists() {\r\n        return incu.get<TodolistType[]>(`todo-lists`);\r\n\r\n    },\r\n    createTodolist(title: string) {\r\n        return incu.post<ResType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return incu.delete<ResType>(`todo-lists/${todolistId}`);\r\n\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return incu.put<ResType>(`todo-lists/${todolistId}`, {title});\r\n\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return incu.get<GetTasksType>(`todo-lists/${todolistId}/tasks`);\r\n\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return incu.post<ResType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title});\r\n\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return incu.delete<ResType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return incu.put<ResType<UpdateTaskModelType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n\r\n    }\r\n}\r\n\r\n//types\r\nexport type ResType<D = {}> = {\r\n    resultCode: number;\r\n    messages: string[];\r\n    data: D\r\n}\r\n\r\n//authTypes\r\nexport type LoginReqParamsType = {\r\n    login: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha?: string;\r\n}\r\n\r\nexport type LoginResDataType = {\r\n    userId: string\r\n}\r\nexport type AuthUserInfoType = {\r\n    id: number;\r\n    email: string;\r\n    login: string;\r\n}\r\n\r\n//TodosTypes\r\nexport type TodolistType = {\r\n    id: string;\r\n    addedDate: string;\r\n    order: number;\r\n    title: string;\r\n}\r\n\r\n//TasksTypes\r\nexport type GetTasksType = {\r\n    items: TaskType[];\r\n    totalCount: number;\r\n    error: string | null;\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string;\r\n    todoListId: string;\r\n    title: string;\r\n    description: string;\r\n    startDate: string;\r\n    deadline: string;\r\n    status: TaskStatusesType;\r\n    priority: TaskPrioritiesType;\r\n    completed: boolean;\r\n    order: number;\r\n    addedDate: string;\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    id: string;\r\n    todoListId: string;\r\n    title: string;\r\n    description: string;\r\n    startDate: string;\r\n    deadline: string;\r\n    status: TaskStatusesType;\r\n    priority: TaskPrioritiesType;\r\n    completed: boolean\r\n\r\n}\r\n\r\nexport enum TaskStatusesType {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPrioritiesType {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n","import {ResType} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {appActions} from '../redux/app-reducer';\r\n\r\nexport const appErrorHandle = (data: ResType, dispatch: Dispatch): void => {\r\n    if (data.messages.length) {\r\n        dispatch(appActions.errorDetectedAC(data.messages[0]))\r\n    } else {\r\n        dispatch(appActions.errorDetectedAC('Some error occured'))\r\n    }\r\n    dispatch(appActions.statusChangedAC('failed'))\r\n}\r\n\r\nexport const netWorkErrorHandle = (error: {message: string}, dispatch: Dispatch): void => {\r\n    dispatch(appActions.errorDetectedAC(error.message ? error.message : 'Some error occured'))\r\n    dispatch(appActions.statusChangedAC('failed'))\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI, ResultCodesEnum} from '../api/todolists-api';\r\nimport { batch } from 'react-redux'\r\nimport {appErrorHandle, netWorkErrorHandle} from '../utils/error-utils';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    isLoggedIn: true,\r\n    isInitialized: false,\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/STATUS_CHANGED':\r\n        case 'APP/ISINITIALIZED_CHANGED':\r\n        case 'APP/IS_LOGGED_IN_CHANGED':\r\n        case 'APP/ERROR_DETECTED':\r\n            return({\r\n                ...state,\r\n                ...action.payload\r\n            })\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const appActions = {\r\n    statusChangedAC: (status: RequestStatusType) => ({type: 'APP/STATUS_CHANGED', payload: {status}} as const),\r\n    isInitializedChangedAC: (value: boolean) => ({type: 'APP/ISINITIALIZED_CHANGED', payload: {isInitialized: value}} as const),\r\n    isLoggedInChangedAC: (value: boolean) => ({type: 'APP/IS_LOGGED_IN_CHANGED', payload: {isLoggedIn: value}} as const),\r\n    errorDetectedAC: (error: string | null) => ({type: 'APP/ERROR_DETECTED', payload: {error}} as const)\r\n};\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        dispatch(appActions.statusChangedAC('loading'))\r\n        const {data} = await authAPI.me()\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            batch(()=>{\r\n                dispatch(appActions.statusChangedAC('succeeded'))\r\n                dispatch(appActions.isLoggedInChangedAC(true))\r\n                dispatch(appActions.isInitializedChangedAC(true))\r\n            })\r\n        } else {\r\n            appErrorHandle(data, dispatch)\r\n        }\r\n    }\r\n    catch(error) {\r\n        batch(()=>{\r\n            netWorkErrorHandle(error, dispatch)\r\n        })\r\n    }\r\n}\r\n\r\ntype InferActionsType<T> = T extends {[key: string]: infer P } ? P : never;\r\nexport type AppActionsType = ReturnType<InferActionsType<typeof appActions>>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type InitialStateType = {\r\n    status: RequestStatusType;\r\n    isLoggedIn: boolean;\r\n    isInitialized: boolean;\r\n    error: string | null;\r\n}","import {ResultCodesEnum, todolistsApi, TodolistType} from '../api/todolists-api';\r\nimport {RequestStatusType} from './app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {batch} from 'react-redux';\r\nimport {appErrorHandle, netWorkErrorHandle} from '../utils/error-utils';\r\n\r\nconst initialState: TodolistDomainType[] = [];\r\n\r\nexport const todolistReducer = (state: TodolistDomainType[] = initialState, action: TodolistActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'TODOLIST/ADDED_TODOLIST': {\r\n            return ([{...action.payload, filter: 'all', entityStatus: 'idle'}, ...state])\r\n        }\r\n        case 'TODOLIST/DELETED_TODOLIST': {\r\n            return (state.filter(tl => tl.id !== action.payload.todolistId))\r\n        }\r\n        case 'TODOLIST/CHANGED_TODOLIST_TITLE': {\r\n            return (state.map(tl => (tl.id === action.payload.todolistId ? {...tl, title: action.payload.title} : tl)))\r\n        }\r\n        case 'TODOLIST/CHANGED_TODOLIST_FILTER': {\r\n            return (state.map(tl => (tl.id === action.payload.todolistId ? {\r\n                ...tl,\r\n                filter: action.payload.filter\r\n            } : tl)))\r\n        }\r\n        case 'TODOLIST/CHANGED_TODOLIST_STATUS': {\r\n            return (state.map(tl => (tl.id === action.payload.todolistId ? {\r\n                ...tl,\r\n                entityStatus: action.payload.entityStatus\r\n            } : tl)))\r\n        }\r\n        case 'TODOLIST/SETTLED_TODOLISTS': {\r\n            return ([\r\n                ...state,\r\n                ...action.payload.todolists.map(tl => ({\r\n                    ...tl,\r\n                    filter: 'all',\r\n                    entityStatus: 'idle'\r\n                } as TodolistDomainType))\r\n            ])\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype InferActionsType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type TodolistActionsType = ReturnType<InferActionsType<typeof todolistActions>>\r\n\r\nexport const todolistActions = {\r\n    addedTodolist: (todolist: TodolistType) => ({type: 'TODOLIST/ADDED_TODOLIST', payload: todolist} as const),\r\n    deletedTodolist: (todolistId: string) => ({type: 'TODOLIST/DELETED_TODOLIST', payload: {todolistId}} as const),\r\n\r\n    changedTodolistTitle: (todolistId: string, title: string) => ({\r\n        type: 'TODOLIST/CHANGED_TODOLIST_TITLE',\r\n        payload: {todolistId, title}\r\n    } as const),\r\n    changedTodolistFilter: (todolistId: string, filter: FilterValuesType) => ({\r\n        type: 'TODOLIST/CHANGED_TODOLIST_FILTER',\r\n        payload: {todolistId, filter}\r\n    } as const),\r\n    changedTodolistEntityStatus: (todolistId: string, entityStatus: RequestStatusType) => (\r\n        {type: 'TODOLIST/CHANGED_TODOLIST_STATUS', payload: {todolistId, entityStatus}} as const\r\n    ),\r\n    setTodolist: (todolists: TodolistType[]) => ({type: 'TODOLIST/SETTLED_TODOLISTS', payload: {todolists}} as const)\r\n}\r\n\r\nexport const fetchTodolistsTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const {data} = await todolistsApi.getTodolists()\r\n            dispatch(todolistActions.setTodolist(data))\r\n    } catch (error) {\r\n        netWorkErrorHandle(error, dispatch)\r\n    }\r\n}\r\n\r\nexport const addTodolist = (title: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const {data} = await todolistsApi.createTodolist(title)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n\r\n            dispatch(todolistActions.addedTodolist(data.data.item))\r\n        } else {\r\n            appErrorHandle(data, dispatch)\r\n        }\r\n    } catch (error) {\r\n\r\n        netWorkErrorHandle(error, dispatch)\r\n    }\r\n}\r\nexport const deleteTodolist = (todolistId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const {data} = await todolistsApi.deleteTodolist(todolistId)\r\n\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(todolistActions.deletedTodolist(todolistId))\r\n        } else {\r\n            appErrorHandle(data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        netWorkErrorHandle(error, dispatch)\r\n    }\r\n}\r\nexport const changeTodolistTitle = (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const {data} = await todolistsApi.updateTodolist(todolistId, title)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            batch(() => {\r\n                todolistActions.changedTodolistTitle(todolistId, title)\r\n\r\n            })\r\n        } else {\r\n            appErrorHandle(data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        netWorkErrorHandle(error, dispatch)\r\n    }\r\n}\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType, entityStatus: RequestStatusType }","export default __webpack_public_path__ + \"static/media/fistify-logo.7b04169f.svg\";","import React, {ChangeEvent, FC, FocusEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button} from 'antd';\r\nimport {PlusCircleFilled} from '@ant-design/icons/lib';\r\nimport Input from 'antd/lib/input';\r\n\r\nexport const AddItemForm: FC<{bordered?: boolean, addItem: (title: string) => void}> = ({bordered = true, addItem, ...props}) => {\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n\r\n    const onChangeHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const addItemHandler = () => {\r\n        if (inputValue.trim() !== '') {\r\n            addItem(inputValue);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    const onSubmitHandle = (e: KeyboardEvent<HTMLInputElement> | FocusEvent<HTMLInputElement>) => {\r\n        if ((e as KeyboardEvent<HTMLInputElement>).key === 'Enter'\r\n            || (e as FocusEvent<HTMLInputElement>).type === 'blur' ) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div style={{display: 'flex', width: '100%'}}>\r\n            <Input onKeyPress={onSubmitHandle}\r\n                   onBlur={onSubmitHandle}\r\n                   placeholder={'Add task'}\r\n                   value={inputValue}\r\n                   bordered={bordered}\r\n                   onChange={onChangeHandle} />\r\n            <Button\r\n                style={{marginLeft: '8px'}}\r\n                type='text'\r\n                icon={<PlusCircleFilled style={{color: '#2999ff', fontSize: '18px'}}/>}\r\n                shape='circle'\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {\r\n    ChangeEvent,\r\n    MouseEvent,\r\n    KeyboardEvent,\r\n    FocusEvent,\r\n    FC,\r\n    useState,\r\n    CSSProperties\r\n} from 'react';\r\nimport {Input} from 'antd';\r\nimport {EnterOutlined} from '@ant-design/icons';\r\nimport Button from 'antd/lib/button';\r\nimport { Typography} from 'antd';\r\nconst {Text} = Typography;\r\n\r\nexport const EditableSpan: FC<{\r\n    title?: string;\r\n    strong?: boolean;\r\n    style?: CSSProperties;\r\n    bordered?: boolean;\r\n    onTitleChange: (title: string) => void\r\n}> = ({onTitleChange, title = 'empty', strong = false, bordered = true, style, ...props}) => {\r\n    const [isEditMode, setIsEditMode] = useState<boolean>(false)\r\n    const [content, setContent] = useState<string>(title || 'undefined')\r\n\r\n    const onButtonClickHandle = (e: MouseEvent<HTMLElement>) => {\r\n        setIsEditMode(prev => !prev)\r\n    }\r\n\r\n    const onChangeSubmitHandle = (event: KeyboardEvent<HTMLInputElement>\r\n        | FocusEvent<HTMLInputElement>) => {\r\n        if ((event as KeyboardEvent<HTMLInputElement>).key === 'Enter'\r\n            || (event as FocusEvent<HTMLInputElement>).type === 'blur' ) {\r\n            if (content !== '') {\r\n                onTitleChange(content);\r\n                setIsEditMode(prev => !prev);\r\n            } else {\r\n                setContent(title || 'empty')\r\n                setIsEditMode(prev => !prev)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onContentChangeHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setContent(e.target.value)\r\n    }\r\n\r\n    if(isEditMode) {\r\n        return(\r\n            <Input value={content}\r\n                   onKeyPress={onChangeSubmitHandle}\r\n                   suffix={<EnterOutlined />}\r\n                   onChange={onContentChangeHandle}\r\n                   onBlur={onChangeSubmitHandle}\r\n                   bordered={bordered}\r\n                   autoFocus\r\n                   style={{...style}}\r\n            />\r\n        )\r\n    }\r\n    return(\r\n        <Button type='text' block onClick={onButtonClickHandle} style={{...style}}>\r\n            <Text strong={strong} style={{width: '100%', textOverflow: 'ellipsis', overflow: 'hidden'}}>\r\n                {content}\r\n            </Text>\r\n        </Button>\r\n    )\r\n}","import {ResultCodesEnum, TaskType, todolistsApi, UpdateTaskModelType} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {batch} from 'react-redux';\r\nimport {appErrorHandle, netWorkErrorHandle} from '../utils/error-utils';\r\nimport {AppStateType} from './store';\r\n\r\nexport type InitialStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst initialState: InitialStateType = {}\r\n\r\nexport const taskReducer = (state: InitialStateType = initialState, action: TaskActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'TASKS/SET_TASKS': {\r\n            return({\r\n                ...state,\r\n                [action.payload.todolistId]: [...action.payload.tasks]\r\n            })\r\n        }\r\n        case 'TASKS/ADDED_TASK': {\r\n            return({\r\n                ...state,\r\n                [action.payload.task.todoListId]: [...state[action.payload.task.todoListId], {...action.payload.task}]\r\n            })\r\n        }\r\n        case 'TASKS/DELETED_TASK': {\r\n            return({\r\n                ...state,\r\n                [action.payload.todolistId]: [\r\n                    ...state[action.payload.todolistId]\r\n                        .filter(t => t.id !== action.payload.taskId)\r\n                ]\r\n            })\r\n        }\r\n        case 'TASKS/UPDATED_TASK': {\r\n            return({\r\n                ...state,\r\n                [action.payload.model.todoListId]: [\r\n                    ...state[action.payload.model.todoListId]\r\n                        .map(t => t.id === action.payload.model.id\r\n                            ? {...t, ...action.payload.model}\r\n                            : t)\r\n                ]\r\n            })\r\n        }\r\n        default: return state\r\n    }\r\n}\r\ntype InferActionsType<T> = T extends {[key: string]: infer U} ? U: never\r\ntype TaskActionsType = ReturnType<InferActionsType<typeof taskActions>>\r\n\r\nexport const taskActions = {\r\n    setTasks: (todolistId: string, tasks: TaskType[]) => ({type: 'TASKS/SET_TASKS', payload: {todolistId, tasks}} as const),\r\n    addedTask: (task: TaskType) => ({type: 'TASKS/ADDED_TASK', payload: {task: task}} as const),\r\n    deletedTask: (todolistId: string, taskId: string) => ({type: 'TASKS/DELETED_TASK', payload: {todolistId, taskId}} as const),\r\n    updatedTask: (model: UpdateTaskModelType) => ({type: 'TASKS/UPDATED_TASK', payload: {model}} as const)\r\n}\r\n\r\n\r\nexport const fetchTasks = (todolistId: string) => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        const {data} = await todolistsApi.getTasks(todolistId)\r\n        batch(() => {\r\n            dispatch(taskActions.setTasks(todolistId, data.items))\r\n\r\n        })\r\n    }\r\n    catch(error) {\r\n        netWorkErrorHandle(error, dispatch)\r\n    }\r\n}\r\nexport const deleteTask = (todolistId: string, taskId: string) => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        const {data} = await todolistsApi.deleteTask(todolistId, taskId)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n           batch( () => {\r\n               dispatch(taskActions.deletedTask(todolistId, taskId))\r\n\r\n           })\r\n        } else {\r\n            appErrorHandle(data, dispatch)\r\n        }\r\n    }\r\n    catch(error) {\r\n        netWorkErrorHandle(error, dispatch)\r\n    }\r\n}\r\nexport const addTask = (todolistId: string, title: string) => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        const {data} = await todolistsApi.createTask(todolistId, title)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            batch(() => {\r\n                dispatch(taskActions.addedTask(data.data.item))\r\n\r\n            })\r\n        } else {\r\n            appErrorHandle(data, dispatch)\r\n        }\r\n    }\r\n    catch(error) {\r\n        netWorkErrorHandle(error, dispatch)\r\n    }\r\n}\r\nexport const updateTask = (todolistId: string, taskId: string, model: UpdateTaskModelType) => async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    let task = getState().tasks[todolistId].filter(t => t.id === taskId)[0]\r\n    try {\r\n        const {data} = await todolistsApi.updateTask(todolistId, taskId, model)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(taskActions.updatedTask(data.data))\r\n        } else {\r\n            appErrorHandle(data, dispatch)\r\n        }\r\n    }\r\n    catch(error) {\r\n        if (task) {\r\n            dispatch(taskActions.updatedTask({...task, ...model}))\r\n        }\r\n        netWorkErrorHandle(error, dispatch)\r\n    }\r\n}","import React, {FC} from 'react';\r\nimport Checkbox, {CheckboxChangeEvent} from 'antd/lib/checkbox';\r\nimport {EditableSpan} from '../../common/EditableSpan/EditableSpan';\r\nimport {Button} from 'antd';\r\nimport {DeleteFilled} from '@ant-design/icons/lib';\r\nimport {TaskStatusesType, TaskType, UpdateTaskModelType} from '../../../api/todolists-api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {deleteTask, updateTask} from '../../../redux/task-reducer';\r\n\r\nexport const Task: FC<{task: TaskType}> = React.memo(({task}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onCheckboxChange = (e: CheckboxChangeEvent) => {\r\n        const newTaskModel: UpdateTaskModelType = { ...task,\r\n            status: (e.target.checked ? TaskStatusesType.Completed : TaskStatusesType.New) }\r\n        dispatch(updateTask(task.todoListId, task.id, newTaskModel));\r\n    }\r\n\r\n    const onTaskTitleChanged = (title: string) => {\r\n        const newTaskModel: UpdateTaskModelType = { ...task, title}\r\n        dispatch(updateTask(task.todoListId, task.id, newTaskModel));\r\n    }\r\n\r\n    const onRemoveTaskClick = () => {\r\n        dispatch(deleteTask(task.todoListId, task.id))\r\n    }\r\n\r\n    return(\r\n        <div style={{display: 'flex', alignItems: 'center', margin: '8px 0'}}>\r\n            <Checkbox checked={task.status === TaskStatusesType.Completed} onChange={onCheckboxChange} style={{marginRight: '16px'}}/>\r\n            <EditableSpan onTitleChange={onTaskTitleChanged} title={task.title} bordered={true} style={{marginLeft: '-8px', paddingLeft: '8px', textAlign: 'left'}}/>\r\n            <Button\r\n                onClick={onRemoveTaskClick}\r\n                type='text'\r\n                style={{marginLeft: '8px'}}\r\n                icon={<DeleteFilled style={{color: '#c8c8c8', fontSize: '18px'}}/>}\r\n                shape='circle'\r\n            />\r\n        </div>\r\n    )\r\n})","import React, {FC, useEffect} from 'react';\r\nimport {Button, Radio, RadioChangeEvent, Space, Spin} from 'antd';\r\nimport Card from 'antd/lib/card';\r\nimport {EditableSpan} from '../common/EditableSpan/EditableSpan';\r\nimport {DeleteFilled} from '@ant-design/icons/lib';\r\nimport {Task} from './Task/Task';\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm';\r\nimport {changeTodolistTitle, deleteTodolist, FilterValuesType, todolistActions,} from '../../redux/todolist-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {addTask, fetchTasks} from '../../redux/task-reducer';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {TaskType} from '../../api/todolists-api';\r\nimport styles from './Todolist.module.css';\r\nimport {selectTasks} from \"./todolist-selectors\";\r\n\r\nexport const Todolist: FC<{\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    }> = React.memo(({id, title, filter}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppStateType, TaskType[] | null>(state => selectTasks(state, id, filter))\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks(id))\r\n\r\n    }, [dispatch, id])\r\n\r\n    const addTaskHandle = (title: string) => {\r\n        dispatch(addTask(id, title))\r\n    }\r\n\r\n    const onTodolistTitleChanged = (title: string) => {\r\n        dispatch(changeTodolistTitle(id, title))\r\n    }\r\n\r\n    const onRemoveTodolistClick = () => {\r\n        dispatch(deleteTodolist(id))\r\n    }\r\n\r\n    const onFilterValueChangeHandle = (e: RadioChangeEvent) => {\r\n        dispatch(todolistActions.changedTodolistFilter(id, e.target.value.toLowerCase() ))\r\n    }\r\n\r\n    if(tasks === null) {\r\n        return(\r\n            <Space size='large'>\r\n                <Spin size='large' tip='Initialize...'/>\r\n            </Space>\r\n        )\r\n    }\r\n    console.log('todolist render')\r\n    return (\r\n        <Card bodyStyle={{\r\n            height: '100%',\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            flexDirection: 'column',\r\n\r\n        }} className={`${styles.card}`}\r\n              title={\r\n                  <div style={{display: 'flex', alignItems: 'center'}}>\r\n                      <EditableSpan onTitleChange={onTodolistTitleChanged} title={title}\r\n                                    bordered={false}\r\n                                    strong={true}\r\n                                    style={{\r\n                                        marginLeft: '0',\r\n                                        paddingLeft: '0',\r\n                                        fontSize: '20px',\r\n                                        lineHeight: '1',\r\n                                        textAlign: 'left',\r\n                                        overflow: 'hidden',\r\n                                    }}/>\r\n                      <Button\r\n                          onClick={onRemoveTodolistClick}\r\n                          type='text'\r\n                          icon={<DeleteFilled style={{color: '#c8c8c8', fontSize: '18px'}}/>}\r\n                          shape='circle'\r\n                      />\r\n                  </div>\r\n              } bordered={false} >\r\n            <div style={{display: 'flex', flexDirection: 'column', height: '100%'}}>\r\n                <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'space-between', height: '100%'}}>\r\n                    <div>\r\n                        <div style={{marginBottom: '16px'}}>\r\n                            <AddItemForm addItem={addTaskHandle}/>\r\n                        </div>\r\n                        <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                            {!!tasks && tasks.map((t) => (<Task key={t.id} task={t} />))}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{margin: '16px 0'}}>\r\n                        <Radio.Group style={{display: 'flex'}} onChange={onFilterValueChangeHandle}>\r\n                            <Radio.Button value='All'>All</Radio.Button>\r\n                            <Radio.Button value='Active'>Active</Radio.Button>\r\n                            <Radio.Button value='Completed'>Completed</Radio.Button>\r\n                        </Radio.Group>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    )\r\n})","import {TaskStatusesType} from \"../../api/todolists-api\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {FilterValuesType} from \"../../redux/todolist-reducer\";\r\n\r\nexport const selectTasks = (state: AppStateType, id: string, filter: FilterValuesType) => {\r\n    if (!state.tasks[id]) {\r\n        return null\r\n    }\r\n    if (filter === 'all') {\r\n        return (state.tasks[id])\r\n    } else {\r\n        return (state.tasks[id].filter(t => {\r\n            if (filter === 'active') {\r\n                return t.status === TaskStatusesType.New\r\n            } else if (filter === 'completed') {\r\n                return t.status === TaskStatusesType.Completed\r\n            }\r\n            return true;\r\n        }))\r\n    }\r\n}","import React, {FC} from 'react';\r\nimport {Todolist} from '../Todolist/Todolist';\r\nimport {TodolistDomainType} from '../../redux/todolist-reducer';\r\nimport {Space, Spin} from \"antd\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\n\r\nexport const Todolists: FC = () => {\r\n\r\n    const todolists = useSelector<AppStateType, TodolistDomainType[] | null>(state => {\r\n        return(!!state.todolist ? state.todolist : null)\r\n    })\r\n\r\n    if(!todolists) {\r\n        console.log('spinners')\r\n        return(\r\n            <Space size='large'>\r\n                <Spin size='large' tip='Initialize...'/>\r\n            </Space>\r\n        )\r\n    }\r\n\r\n    console.log('todolist mapping')\r\n    return(\r\n        <>\r\n            {todolists.map(td => (<Todolist key={td.id} title={td.title} id={td.id} filter={td.filter}/>))}\r\n        </>\r\n    )\r\n}","import React, {FC, useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {addTodolist, fetchTodolistsTC} from '../../redux/todolist-reducer';\r\nimport Layout, {Content, Footer, Header} from 'antd/lib/layout/layout';\r\nimport fastifyLogo from '../../assets/img/svg/fistify-logo.svg';\r\nimport Breadcrumb from 'antd/lib/breadcrumb';\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm';\r\nimport {Card} from 'antd';\r\nimport {Todolists} from '../Todolists/Todolists';\r\n\r\nexport const TodolistsPage: FC<{}> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodolistHandle = (title: string) => {\r\n        dispatch(addTodolist(title))\r\n    }\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTodolistsTC())\r\n\r\n    }, [dispatch]);\r\n\r\n    console.log('TodolistsPage')\r\n\r\n    return(\r\n        <Layout className={'layout'} style={{minHeight: '100vh'}}>\r\n            <Header style={{display: 'flex', backgroundColor: '#6d8aa8'}}>\r\n                <img src={fastifyLogo} alt='fastify logotype' style={{maxWidth: '32px', marginRight: '8px'}}/>\r\n                <h3 style={{color: '#fff'}}>\r\n                    Todolist Application\r\n                </h3>\r\n            </Header>\r\n            <Content className={'site-layout-content'} style={{width: '100%', padding: '0 50px', margin: '0 auto'}}>\r\n                <Breadcrumb style={{margin: '16px 8px'}}>\r\n                    <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n                <div className=\"site-layout-background\" style={{flexDirection: 'column', maxWidth: '1200px'}}>\r\n                    <Card style={{margin: '8px'}} bordered={false}>\r\n                        <AddItemForm addItem={addTodolistHandle}/>\r\n                    </Card>\r\n                    <div style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'center', width: '100%'}}>\r\n                        <Todolists />\r\n                    </div>\r\n                </div>\r\n            </Content>\r\n            <Footer style={{textAlign: 'center'}}>\r\n                Todolist Application ©2021 Created by Nikita Levitski\r\n            </Footer>\r\n        </Layout>\r\n    )\r\n}\r\n\r\n","import React, {FC} from 'react';\r\n\r\nexport const LoginPage: FC<{}> = (props) => {\r\n    return(<div>\r\n        <h1>Login Page</h1>\r\n    </div>)\r\n}","import React, {FC} from 'react';\r\n\r\nexport const RegistrationPage: FC<{}> = (props) => {\r\n\r\n    return(\r\n        <h1>\r\n        Registration Page\r\n        </h1>\r\n    )\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from './redux/store';\r\nimport {initializeAppTC, RequestStatusType} from './redux/app-reducer';\r\nimport {message, Space, Spin} from 'antd';\r\nimport {TodolistsPage} from './components/TodolistsPage/TodolistsPage';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport {LoginPage} from './components/LoginPage/LoginPage';\r\nimport {RegistrationPage} from './components/RegistrationPage/RegistrationPage';\r\n\r\nexport const App = () => {\r\n    const dispatch = useDispatch();\r\n    const isInitialized = useSelector<AppStateType, boolean>(state => state.app.isInitialized);\r\n    const status = useSelector<AppStateType, RequestStatusType>(state => state.app.status);\r\n    const error = useSelector<AppStateType, string | null>(state => state.app.error);\r\n\r\n    const initNotification = 'initializeNotificatoin';\r\n    const initializationMessage = useCallback((status: string) => {\r\n            if (status === 'loading') {\r\n                message.loading({content: 'initializing!', key: initNotification, duration: 0, className: 'custom-class', style: {marginTop: '20vh'}})\r\n            } else if (status === 'succeeded') {\r\n                message.success({content: 'App Initialized!', key: initNotification, duration: 1, className: 'custom-class', style: {marginTop: '20vh'}})\r\n            } else if (error?.length && status === 'failed') {\r\n                message.error({content: error, key: initNotification, duration: 5, className: 'custom-class', style: {marginTop: '20vh'}})\r\n            } else if (status === 'failed') {\r\n                message.warning({content: !!error ? error : 'Some app error', key: initNotification, duration: 3, className: 'custom-class', style: {marginTop: '20vh'}})\r\n            }\r\n\r\n    }, [error]);\r\n\r\n    useEffect(() => {\r\n        if (!isInitialized) {\r\n            console.log(`initialization requested, status: ${isInitialized}`)\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [dispatch, isInitialized])\r\n\r\n\r\n    useEffect(() => {\r\n        if (status !== 'idle') {\r\n            console.log('status: ', status)\r\n            initializationMessage(status)\r\n        }\r\n    }, [dispatch, status, initializationMessage])\r\n\r\n    console.log('App rendered')\r\n\r\n    if (!isInitialized) {\r\n        return(\r\n            <div className='App'>\r\n                <Space size='large'>\r\n                    <Spin size='large' tip='Initialize...'/>\r\n                </Space>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route path={'/login'} render={()=><LoginPage /> } />\r\n                <Route path={'/registration'} render={()=><RegistrationPage /> } />\r\n                <Route path={'/'} exact render={ () => {\r\n                    if (!isInitialized) {\r\n                        return(<Redirect to={'/login'}/>)\r\n                    }\r\n                    return <Redirect to={'/todolists'} />\r\n                }} />\r\n                <Route path={'/todolists'} render={()=><TodolistsPage/>} />\r\n                <Route path={'*'} render={()=><h1>404 Page not found</h1>} />\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\n","import {authAPI, LoginReqParamsType, ResultCodesEnum} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {batch} from 'react-redux';\r\nimport {appActions} from './app-reducer';\r\nimport {appErrorHandle, netWorkErrorHandle} from '../utils/error-utils';\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        isLoggedInStatusChangedAC(state, action: PayloadAction<{value: boolean}>) {\r\n           state.isLoggedIn = action.payload.value;\r\n        }\r\n    }\r\n});\r\n\r\nexport const authReducer = slice.reducer;\r\n\r\nexport const {isLoggedInStatusChangedAC} = slice.actions;\r\n\r\n// (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'AUTH/IS_LOGGED_IN_STATUS':\r\n//             return ({\r\n//                 ...state,\r\n//                 ...action.payload\r\n//             })\r\n//         default: return state\r\n//     }\r\n// }\r\n\r\n// export const authActions = {\r\n//     isLoggedInStatusChangedAC: (status: boolean) => ({type: 'AUTH/IS_LOGGED_IN_STATUS', payload: {status}}),\r\n// }\r\n// type AuthActionsType = ReturnType<typeof  authActions.isLoggedInStatusChangedAC>\r\n\r\nexport const loginTC = (loginData: LoginReqParamsType) => async (dispatch: Dispatch) => {\r\n    dispatch(appActions.statusChangedAC('loading'))\r\n    try {\r\n        const {data} = await authAPI.login(loginData)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            batch(()=>{\r\n                dispatch(isLoggedInStatusChangedAC({value: true}));\r\n                dispatch(appActions.statusChangedAC('succeeded'));\r\n            })\r\n        } else {\r\n            appErrorHandle(data, dispatch)\r\n        }\r\n    }\r\n    catch(error) {\r\n        netWorkErrorHandle(error, dispatch);\r\n        dispatch(isLoggedInStatusChangedAC({value: false}))\r\n    }\r\n}\r\nexport const logoutTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(appActions.statusChangedAC('loading'));\r\n    try {\r\n        const {data} = await authAPI.logout();\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            batch(() => {\r\n                dispatch(isLoggedInStatusChangedAC({value: true}));\r\n                dispatch(appActions.statusChangedAC('succeeded'));\r\n            })\r\n        } else {\r\n            appErrorHandle(data, dispatch);\r\n        }\r\n    }\r\n    catch(error) {\r\n        netWorkErrorHandle(error, dispatch);\r\n    }\r\n}\r\n\r\n// export type InitialStateType = {\r\n//     isLoggedIn: boolean;\r\n// }","import {combineReducers, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {authReducer} from './auth-reducer';\r\nimport { taskReducer } from './task-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nlet rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolist: todolistReducer,\r\n    tasks: taskReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n//export const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\n\r\n//@ts-ignore\r\nwindow.__store__ = store;\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {store} from './redux/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <App/>\r\n          </Provider>\r\n      </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Todolist_card__2FZ3x\"};"],"sourceRoot":""}